server.port=8600


#itbooking.htmlparser.url=https://ke.qq.com
#itbooking.htmlparser.name=mofeng
#itbooking.htmlparser.author=keke

#freemaker
########################################################
###FREEMARKER (FreeMarkerAutoConfiguration) freemaker
########################################################
spring.freemarker.allow-request-override=false
spring.freemarker.cache=false
spring.freemarker.check-template-location=true
spring.freemarker.charset=UTF-8
spring.freemarker.enabled=true
spring.freemarker.content-type=text/html
spring.freemarker.settings.tag_syntax=auto_detect
spring.freemarker.settings.default_encoding=UTF-8
spring.freemarker.settings.output_encoding=UTF-8
spring.freemarker.settings.locale=zh_CN
spring.freemarker.settings.date_format=yyyy-MM-dd
spring.freemarker.settings.time_format=HH:mm:ss
spring.freemarker.settings.boolean_format=true,false
spring.freemarker.settings.whitespace_stripping=true
spring.freemarker.settings.url_escaping_charset=UTF-8
spring.freemarker.settings.datetime_format=yyyy/MM/dd HH:mm:ss
spring.freemarker.settings.number_format=#.###
spring.freemarker.settings.classic_compatible=true
#ignore,debug,html_debug,rethrow
spring.freemarker.settings.template_exception_handler=html_debug
spring.freemarker.expose-request-attributes=true
spring.freemarker.expose-session-attributes=true
spring.freemarker.expose-spring-macro-helpers=true
spring.freemarker.request-context-attribute=request
spring.freemarker.suffix=.html
spring.freemarker.template-loader-path=classpath:/templates/


#dubbo 配置
#配置服务
dubbo.application.name=springboot-dubbo-front-consumer
#注册到zookeeper中
dubbo.registry.address=zookeeper://127.0.0.1:2181
#dubbo传输协议的端口--rpc --netty --nioscoket-- client/server---20880
dubbo.protocol.name=dubbo
dubbo.protocol.port=20881

dubbo.registry.check=false
#注册协议
dubbo.monitor.protocol=registry
# Qos=Quality of Service，qos是Dubbo的在线运维命令，可以对服务进行动态的配置、控制及查询，Dubboo2.5.8新版本重构了telnet（telnet是从Dubbo2.0.5开始支持的）模块，提供了新的telnet命令支持，新版本的telnet端口与dubbo协议的端口是不同的端口，默认为22222，可以通过配置文件dubbo.properties修改。telnet 模块现在同时支持 http 协议和 telnet 协议，方便各种情况的使用。
#注意，从2.6.4/2.7.0开始，qosAcceptForeignIp默认配置改为false（拒绝远端主机发出的命令，只允许服务本机执行），如果qosAcceptForeignIp设置为true，有可能带来安全风险，请仔细评估后再打开。
dubbo.application.qos-enable=true
dubbo.application.qos-port=44444
dubbo.application.qos-accept-foreign-ip=false



############################ redis的配置###############################
# REDIS（RedisProperties）
# （普通集群，不使用则不用开启）在群集中执行命令时要遵循的最大重定向数目。
# spring.redis.cluster.max-redirects=
# （普通集群，不使用则不用开启）以逗号分隔的“主机：端口”对列表进行引导。
#  注意：一旦开启了集群模式，那么基于单机的配置就会覆盖。
# spring.redis.cluster.nodes=127.0.0.1:1001,127.0.0.1:1002 
# 连接工厂使用的数据库索引。
spring.redis.database=0
# 连接URL，将覆盖主机，端口和密码（用户将被忽略），例如：redis://user:password@example.com:6379
#spring.redis.url= redis://127.0.0.1:6379
#spring.redis.url= redis://@127.0.0.1:6379
# Redis服务器主机。
#spring.redis.host=127.0.0.1
# Redis服务器端口。
#spring.redis.port=6379
# 登录redis服务器的密码。
#spring.redis.password=
# 启用SSL支持。
spring.redis.ssl=false
# 池在给定时间可以分配的最大连接数。使用负值无限制。
spring.redis.jedis.pool.max-active=300
# 池中“空闲”连接的最大数量。使用负值表示无限数量的空闲连接。
spring.redis.jedis.pool.max-idle=20
# 连接分配在池被耗尽时抛出异常之前应该阻塞的最长时间量（以毫秒为单位）。使用负值可以无限期地阻止。
spring.redis.jedis.pool.max-wait=3000
# 目标为保持在池中的最小空闲连接数。这个设置只有在正面的情况下才有效果。
spring.redis.jedis.pool.min-idle=10


# （哨兵模式，不使用则不用开启）Redis服务器的名称。
# spring.redis.sentinel.master=
# （哨兵模式，不使用则不用开启）主机：端口对的逗号分隔列表。 
# spring.redis.sentinel.nodes=
# 以毫秒为单位的连接超时。
#spring.redis.timeout=0



#redis
redis.host=127.0.0.1
redis.port=6379
redis.timeout=10
redis.password=
redis.poolMaxTotal=1000
redis.poolMaxIdle=500
redis.poolMaxWait=500

